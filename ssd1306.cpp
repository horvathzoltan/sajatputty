#include "ssd1306.h"

ssd1306::ssd1306()
{

}

const unsigned char seedfont[][8] =
{
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x5F,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x07,0x00,0x07,0x00,0x00,0x00},
  {0x00,0x14,0x7F,0x14,0x7F,0x14,0x00,0x00},
  {0x00,0x24,0x2A,0x7F,0x2A,0x12,0x00,0x00},
  {0x00,0x23,0x13,0x08,0x64,0x62,0x00,0x00},
  {0x00,0x36,0x49,0x55,0x22,0x50,0x00,0x00},
  {0x00,0x00,0x05,0x03,0x00,0x00,0x00,0x00},
  {0x00,0x1C,0x22,0x41,0x00,0x00,0x00,0x00},
  {0x00,0x41,0x22,0x1C,0x00,0x00,0x00,0x00},
  {0x00,0x08,0x2A,0x1C,0x2A,0x08,0x00,0x00},
  {0x00,0x08,0x08,0x3E,0x08,0x08,0x00,0x00},
  {0x00,0xA0,0x60,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x00},
  {0x00,0x60,0x60,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x20,0x10,0x08,0x04,0x02,0x00,0x00},
  {0x00,0x3E,0x51,0x49,0x45,0x3E,0x00,0x00},
  {0x00,0x00,0x42,0x7F,0x40,0x00,0x00,0x00},
  {0x00,0x62,0x51,0x49,0x49,0x46,0x00,0x00},
  {0x00,0x22,0x41,0x49,0x49,0x36,0x00,0x00},
  {0x00,0x18,0x14,0x12,0x7F,0x10,0x00,0x00},
  {0x00,0x27,0x45,0x45,0x45,0x39,0x00,0x00},
  {0x00,0x3C,0x4A,0x49,0x49,0x30,0x00,0x00},
  {0x00,0x01,0x71,0x09,0x05,0x03,0x00,0x00},
  {0x00,0x36,0x49,0x49,0x49,0x36,0x00,0x00},
  {0x00,0x06,0x49,0x49,0x29,0x1E,0x00,0x00},
  {0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00},
  {0x00,0x00,0xAC,0x6C,0x00,0x00,0x00,0x00},
  {0x00,0x08,0x14,0x22,0x41,0x00,0x00,0x00},
  {0x00,0x14,0x14,0x14,0x14,0x14,0x00,0x00},
  {0x00,0x41,0x22,0x14,0x08,0x00,0x00,0x00},
  {0x00,0x02,0x01,0x51,0x09,0x06,0x00,0x00},
  {0x00,0x32,0x49,0x79,0x41,0x3E,0x00,0x00},
  {0x00,0x7E,0x09,0x09,0x09,0x7E,0x00,0x00},
  {0x00,0x7F,0x49,0x49,0x49,0x36,0x00,0x00},
  {0x00,0x3E,0x41,0x41,0x41,0x22,0x00,0x00},
  {0x00,0x7F,0x41,0x41,0x22,0x1C,0x00,0x00},
  {0x00,0x7F,0x49,0x49,0x49,0x41,0x00,0x00},
  {0x00,0x7F,0x09,0x09,0x09,0x01,0x00,0x00},
  {0x00,0x3E,0x41,0x41,0x51,0x72,0x00,0x00},
  {0x00,0x7F,0x08,0x08,0x08,0x7F,0x00,0x00},
  {0x00,0x41,0x7F,0x41,0x00,0x00,0x00,0x00},
  {0x00,0x20,0x40,0x41,0x3F,0x01,0x00,0x00},
  {0x00,0x7F,0x08,0x14,0x22,0x41,0x00,0x00},
  {0x00,0x7F,0x40,0x40,0x40,0x40,0x00,0x00},
  {0x00,0x7F,0x02,0x0C,0x02,0x7F,0x00,0x00},
  {0x00,0x7F,0x04,0x08,0x10,0x7F,0x00,0x00},
  {0x00,0x3E,0x41,0x41,0x41,0x3E,0x00,0x00},
  {0x00,0x7F,0x09,0x09,0x09,0x06,0x00,0x00},
  {0x00,0x3E,0x41,0x51,0x21,0x5E,0x00,0x00},
  {0x00,0x7F,0x09,0x19,0x29,0x46,0x00,0x00},
  {0x00,0x26,0x49,0x49,0x49,0x32,0x00,0x00},
  {0x00,0x01,0x01,0x7F,0x01,0x01,0x00,0x00},
  {0x00,0x3F,0x40,0x40,0x40,0x3F,0x00,0x00},
  {0x00,0x1F,0x20,0x40,0x20,0x1F,0x00,0x00},
  {0x00,0x3F,0x40,0x38,0x40,0x3F,0x00,0x00},
  {0x00,0x63,0x14,0x08,0x14,0x63,0x00,0x00},
  {0x00,0x03,0x04,0x78,0x04,0x03,0x00,0x00},
  {0x00,0x61,0x51,0x49,0x45,0x43,0x00,0x00},
  {0x00,0x7F,0x41,0x41,0x00,0x00,0x00,0x00},
  {0x00,0x02,0x04,0x08,0x10,0x20,0x00,0x00},
  {0x00,0x41,0x41,0x7F,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x02,0x01,0x02,0x04,0x00,0x00},
  {0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00},
  {0x00,0x01,0x02,0x04,0x00,0x00,0x00,0x00},
  {0x00,0x20,0x54,0x54,0x54,0x78,0x00,0x00},
  {0x00,0x7F,0x48,0x44,0x44,0x38,0x00,0x00},
  {0x00,0x38,0x44,0x44,0x28,0x00,0x00,0x00},
  {0x00,0x38,0x44,0x44,0x48,0x7F,0x00,0x00},
  {0x00,0x38,0x54,0x54,0x54,0x18,0x00,0x00},
  {0x00,0x08,0x7E,0x09,0x02,0x00,0x00,0x00},
  {0x00,0x18,0xA4,0xA4,0xA4,0x7C,0x00,0x00},
  {0x00,0x7F,0x08,0x04,0x04,0x78,0x00,0x00},
  {0x00,0x00,0x7D,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x80,0x84,0x7D,0x00,0x00,0x00,0x00},
  {0x00,0x7F,0x10,0x28,0x44,0x00,0x00,0x00},
  {0x00,0x41,0x7F,0x40,0x00,0x00,0x00,0x00},
  {0x00,0x7C,0x04,0x18,0x04,0x78,0x00,0x00},
  {0x00,0x7C,0x08,0x04,0x7C,0x00,0x00,0x00},
  {0x00,0x38,0x44,0x44,0x38,0x00,0x00,0x00},
  {0x00,0xFC,0x24,0x24,0x18,0x00,0x00,0x00},
  {0x00,0x18,0x24,0x24,0xFC,0x00,0x00,0x00},
  {0x00,0x00,0x7C,0x08,0x04,0x00,0x00,0x00},
  {0x00,0x48,0x54,0x54,0x24,0x00,0x00,0x00},
  {0x00,0x04,0x7F,0x44,0x00,0x00,0x00,0x00},
  {0x00,0x3C,0x40,0x40,0x7C,0x00,0x00,0x00},
  {0x00,0x1C,0x20,0x40,0x20,0x1C,0x00,0x00},
  {0x00,0x3C,0x40,0x30,0x40,0x3C,0x00,0x00},
  {0x00,0x44,0x28,0x10,0x28,0x44,0x00,0x00},
  {0x00,0x1C,0xA0,0xA0,0x7C,0x00,0x00,0x00},
  {0x00,0x44,0x64,0x54,0x4C,0x44,0x00,0x00},
  {0x00,0x08,0x36,0x41,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x41,0x36,0x08,0x00,0x00,0x00,0x00},
  {0x00,0x02,0x01,0x01,0x02,0x01,0x00,0x00},
  {0x00,0x02,0x05,0x05,0x02,0x00,0x00,0x00}
};

bool ssd1306::init()
{
    width = 128;
    height = 64;
    addr = 0x3C;
    if((devid = wiringPiI2CSetup(0x3C)) == -1) return false;
    if (poledbuff)
        free(poledbuff);

    // Allocate memory for OLED buffer
    poledbuff = (uint8_t *) malloc ( oled_buff_size );

    uint8_t multiplex = 0x3F;
    uint8_t compins   = 0x12;
    uint8_t contrast = 0x80;
    uint8_t chargepump = 0x14;
    uint8_t precharge  = 0xF1;
    sendCommand(SSD_Display_Off);
    sendCommand(SSD_Set_Muliplex_Ratio);
    sendCommand(multiplex);
    sendCommand(SSD1306_Charge_Pump_Setting);
    sendCommand(chargepump);
    sendCommand(SSD1306_Set_Memory_Mode);
    sendCommand(0x00);
    sendCommand(SSD1306_Set_Display_Clock_Div);
    sendCommand(0x80);
    sendCommand(SSD1306_Set_Display_Offset);
    sendCommand(0x00);
    sendCommand(SSD1306_Set_Start_Line | 0x0);

    sendCommand(SSD1306_Set_Com_Pins);
    sendCommand(compins);
    sendCommand(SSD1306_Set_Precharge_Period);
    sendCommand(precharge);
    sendCommand(SSD1306_Set_Vcomh_Deselect_Level);
    sendCommand(0x40);
    sendCommand(SSD1306_Entire_Display_Resume);
    sendCommand(SSD1306_Normal_Display);

    // Reset to default value in case of
    // no reset pin available on OLED,
    sendCommand( SSD_Set_Column_Address);
    sendCommand(0);
    sendCommand(127);
    sendCommand( SSD_Set_Page_Address);
    sendCommand(0);
    sendCommand(7);

    sendCommand(SSD_Set_ContrastLevel);
    sendCommand(contrast);

    stopScroll();
    clearDisplay();

    usleep(100000);

    return true;
}

void ssd1306::sendCommand(uint8_t c)
{
    char buff[2] ;

    // Clear D/C to switch to command mode
    buff[0] = SSD_Command_Mode;
    buff[1] = c;

    // Write Data on I2C
    wiringPiI2CWrite(devid, buff[0]);
    wiringPiI2CWrite(devid, buff[1]);
}

void ssd1306::stopScroll()
{
    sendCommand(SSD_Deactivate_Scroll);
}

void ssd1306::clearDisplay()
{
    memset(poledbuff, 0, oled_buff_size);
}

void ssd1306::setBrightness(uint8_t b)
{
    sendCommand(SSD_Set_ContrastLevel);
    sendCommand(b);
}

void ssd1306::putSeedChar(char C)
{
    if(C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
        {
            C=' '; //Space
        }

        for(char i=0;i<8;i=i+2)
        {
            for(char j=0;j<8;j++)
            {
                // Character is constructed two pixel at a time using vertical mode from the default 8x8 font
                char c=0x00;
                char bit1=( seedfont[C-32][i]   >> j) & 0x01;
                char bit2=( seedfont[C-32][i+1] >> j) & 0x01;
               // Each bit is changed to a nibble
                c|=(bit1)?grayH:0x00;
                c|=(bit2)?grayL:0x00;
                sendData(c);
            }
        }
}

void ssd1306::putSeedString(const char *String)
{
    unsigned char i=0;
        while(String[i])
        {
            putSeedChar( String[i]);
            i++;
        }
}

void ssd1306::sendData(uint8_t d)
{
    char buff[2];
    buff[0] = SSD_Data_Mode;
    buff[1] = d;

    // Write on i2c
    wiringPiI2CWrite(devid, buff[0]);
    wiringPiI2CWrite(devid, buff[1]);
}

void ssd1306::setSeedTextXY(unsigned char Row, unsigned char Column)
{
    //Column Address
    sendCommand(0x15);             /* Set Column Address */
    sendCommand(0x08+(Column*4));  /* Start Column: Start from 8 */
    sendCommand(0x37);             /* End Column */
    // Row Address
    sendCommand(0x75);             /* Set Row Address */
    sendCommand(0x00+(Row*8));     /* Start Row*/
    sendCommand(0x07+(Row*8));     /* End Row*/
}

void ssd1306::setGrayLevel(uint8_t grayLevel)
{
    grayH = (grayLevel << 4) & 0xF0;
    grayL =  grayLevel & 0x0F;
}

void ssd1306::display()
{
    sendCommand(SSD1306_Set_Lower_Column_Start_Address  | 0x0); // low col = 0
    sendCommand(SSD1306_Set_Higher_Column_Start_Address | 0x0); // hi col = 0
    sendCommand(SSD1306_Set_Start_Line  | 0x0); // line #0
    uint16_t i=0 ;

    // pointer to OLED data buffer
    uint8_t * p = poledbuff;


    char buff[17] ;
    uint8_t x ;

    // Setup D/C to switch to data mode
    buff[0] = SSD_Data_Mode;

    for ( i=0; i<oled_buff_size; i+=16 )
    {
    for (x=1; x<=16; x++)
      buff[x] = *p++;

    for (i = 0; i < 17; i++)
        wiringPiI2CWrite(devid, buff[i]);
    }
}

void ssd1306::drawPixel(int16_t x, int16_t y, uint16_t color)
{
    uint8_t * p = poledbuff;

    if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
      return;


    // Get where to do the change in the buffer
    p = poledbuff + (x + (y/8)*width );

    // x is which column
    if (color == WHITE)
      *p |=  _BV((y%8));
    else
      *p &= ~_BV((y%8));
}
